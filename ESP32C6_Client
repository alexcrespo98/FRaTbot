/*
 * ESP32-C6 BLE Messaging - Proximal (Client/Central)
 * One-way: Client sends messages to Server
 */

#include <BLEDevice.h>
#include <BLEClient.h>
#include <BLEUtils.h>
#include <BLEScan.h>

#define SERVICE_UUID        "12345678-1234-1234-1234-123456789abc"
#define CHARACTERISTIC_UUID "87654321-4321-4321-4321-cba987654321"

BLEClient* pClient;
BLERemoteCharacteristic* pRemoteCharacteristic;
BLEAdvertisedDevice* myDevice = nullptr;
bool doConnect = false;
bool connected = false;

class MyAdvertisedDeviceCallbacks : public BLEAdvertisedDeviceCallbacks {
  void onResult(BLEAdvertisedDevice advertisedDevice) override {
    if (advertisedDevice.haveServiceUUID() &&
        advertisedDevice.isAdvertisingService(BLEUUID(SERVICE_UUID))) {
      BLEDevice::getScan()->stop();
      myDevice = new BLEAdvertisedDevice(advertisedDevice);
      doConnect = true;
      Serial.println("[CLIENT] Found server, attempting to connect...");
    }
  }
};

bool connectToServer() {
  pClient = BLEDevice::createClient();
  if (!pClient->connect(myDevice)) {
    Serial.println("[CLIENT] Failed to connect.");
    return false;
  }
  Serial.println("[CLIENT] Connected to server.");

  BLERemoteService* pService = pClient->getService(SERVICE_UUID);
  if (!pService) {
    Serial.println("[CLIENT] Service not found.");
    pClient->disconnect();
    return false;
  }

  pRemoteCharacteristic = pService->getCharacteristic(CHARACTERISTIC_UUID);
  if (!pRemoteCharacteristic) {
    Serial.println("[CLIENT] Characteristic not found.");
    pClient->disconnect();
    return false;
  }

  connected = true;
  return true;
}

void setup() {
  Serial.begin(115200);
  BLEDevice::init("ProximalBLE");

  BLEScan* scan = BLEDevice::getScan();
  scan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
  scan->setActiveScan(true);
  scan->start(0, false);

  Serial.println("[CLIENT] Scanning for server...");
}

void loop() {
  // Attempt connection if a server was found
  if (doConnect && !connected) {
    if (connectToServer()) {
      Serial.println("[CLIENT] Connection established.");
    }
    doConnect = false;
  }

  // Read input from Serial and send to server
  if (connected && Serial.available()) {
    String msg = Serial.readStringUntil('\n');
    msg.trim();
    if (msg.length() > 0) {
      uint8_t buf[msg.length()];
      memcpy(buf, msg.c_str(), msg.length());
      pRemoteCharacteristic->writeValue(buf, msg.length(), false); // false â†’ write without response
      Serial.print("[CLIENT] Sent to server: ");
      Serial.println(msg);
    }
  }

  // Reconnect if disconnected
  if (connected && pClient && !pClient->isConnected()) {
    Serial.println("[CLIENT] Lost connection. Restarting scan...");
    connected = false;
    doConnect = false;
    delete myDevice;
    myDevice = nullptr;
    BLEDevice::getScan()->start(0, false);
  }

  delay(10);
}
